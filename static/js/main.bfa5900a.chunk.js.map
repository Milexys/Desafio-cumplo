{"version":3,"sources":["Context/index.js","Components/Grafico/index.js","Components/Fecha/index.js","App.js","serviceWorker.js","index.js"],"names":["fechaContext","createContext","FechaProvider","props","useState","startDate","setStartDate","endDate","setEndDate","Provider","value","children","Grafico","elRef","useRef","WSize","setWSize","useEffect","window","addEventListener","handleScroll","initialWSize","current","getBoundingClientRect","width","rect","newWSize","Math","round","ref","style","height","xType","yType","stackBy","yDomain","minimo","maximo","color","data","Fecha","useContext","promedio","resultados","actualizarResultados","ejeXY","setEjes","a","fechaInicial","moment","format","diaInicial","fechaFinal","diaFinal","url","fetch","respuesta","json","resultado","valores","Dolares","map","element","Valor","len","length","prom","reduce","b","parseInt","minim","min","parseFloat","maxim","max","ejes","x","y","consultarAPI","className","dateFormat","locale","es","selected","placeholderText","maxDate","Date","onChange","date","minDate","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bfa5900a.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react'\r\n\r\n\r\nexport const fechaContext = createContext()\r\n\r\nconst FechaProvider = (props) => {\r\n\r\n    const [startDate, setStartDate] = useState(null);\r\n    const [endDate, setEndDate] = useState(null);\r\n\r\n    return (\r\n        <fechaContext.Provider value={{\r\n            startDate, \r\n            setStartDate,\r\n            endDate,\r\n            setEndDate,\r\n        }}>\r\n            {props.children}\r\n        </fechaContext.Provider>\r\n    )\r\n}\r\n\r\nexport default FechaProvider;","import React, { useEffect, useRef, useState } from 'react'\r\nimport { XYPlot, XAxis, YAxis, HorizontalGridLines, VerticalBarSeries, VerticalGridLines  } from 'react-vis';\r\n\r\n\r\n\r\nconst Grafico = (props) => {\r\n    const elRef = useRef(null)\r\n\r\n    const [WSize, setWSize] = useState(0)\r\n\r\n    useEffect(() => {\r\n        const isWindow = typeof window !== `undefined` ? window.addEventListener('resize', handleScroll) : null\r\n        const rect = elRef.current.getBoundingClientRect()\r\n        const initialWSize = rect.width -10\r\n        setWSize(initialWSize)\r\n    }, [])\r\n\r\n    const handleScroll = () => {\r\n        const rect = elRef.current.getBoundingClientRect();\r\n        let newWSize = Math.round(rect.width - 10)\r\n        setWSize(newWSize)\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div ref={elRef} style={{width: '100%', height: '100%'}}>\r\n        <XYPlot\r\n            width={WSize}\r\n            height={300}\r\n            xType=\"ordinal\"\r\n            yType=\"linear\"\r\n            stackBy=\"x\"\r\n            yDomain={[props.minimo-10,props.maximo+10]}>\r\n            <VerticalGridLines />\r\n            <HorizontalGridLines />\r\n            <XAxis />\r\n            <YAxis />\r\n            <VerticalBarSeries\r\n            color=\"#2b9b63d5\"\r\n                data={props.data} />\r\n          \r\n        </XYPlot>\r\n        </div>)\r\n}\r\n\r\nexport default Grafico;","import React, { useContext, useState, useEffect } from 'react';\r\nimport { fechaContext } from '../../Context/index'\r\nimport DatePicker from 'react-datepicker';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport moment from 'moment';\r\nimport es from 'date-fns/locale/es';\r\nimport Grafico from '../Grafico/index'\r\n\r\n\r\nconst Fecha = () => {\r\n\r\n    const { startDate, setStartDate, endDate, setEndDate } = useContext(fechaContext)\r\n\r\n    const [resultados, actualizarResultados] = useState({\r\n        promedio: 0,\r\n        minimo: 0,\r\n        maximo: 0\r\n    })\r\n\r\n    const [ejeXY, setEjes] = useState()\r\n\r\n    useEffect(() => {\r\n        const consultarAPI = async () => {\r\n            const fechaInicial = moment(startDate).format(\"YYYY/MM\")\r\n            const diaInicial = moment(startDate).format(\"DD\")\r\n            const fechaFinal = moment(endDate).format(\"YYYY/MM\")\r\n            const diaFinal = moment(endDate).format(\"DD\")\r\n            const key = \"9c84db4d447c80c74961a72245371245cb7ac15f\";\r\n            const url = `https://api.sbif.cl/api-sbifv3/recursos_api/dolar/periodo/${fechaInicial}/dias_i/${diaInicial}/${fechaFinal}/dias_f/${diaFinal}?apikey=${key}&formato=json`\r\n\r\n            const respuesta = await fetch(url)\r\n            const resultado = await respuesta.json()\r\n\r\n\r\n            const valores = resultado.Dolares.map(element => element.Valor)\r\n            const len = valores.length\r\n            const prom = valores.reduce(function (a, b) { return parseInt(a) + parseInt(b) })\r\n            const minim = valores.reduce(function (a, b) { return Math.min(parseFloat(a), parseFloat(b)) })\r\n            const maxim = valores.reduce(function (a, b) { return Math.max(parseFloat(a), parseFloat(b)) })\r\n            \r\n            const ejes = resultado.Dolares.map(element => {return {x: element.Fecha, y: parseInt(element.Valor)}})\r\n\r\n            actualizarResultados({\r\n                promedio: prom / len,\r\n                minimo: minim,\r\n                maximo: maxim\r\n            })\r\n\r\n            setEjes(ejes)\r\n\r\n           \r\n        }\r\n\r\n        consultarAPI()\r\n    }, [startDate, endDate, setEjes])\r\n\r\n    return (\r\n        <div className=\"content\">\r\n            <div className=\"calendar\">\r\n            <label>Fecha Inicial:</label>\r\n                <DatePicker\r\n                    dateFormat=\"dd/MM/yyyy\"\r\n                    locale={es}\r\n                    selected={startDate}\r\n                    placeholderText=\"Selecciona una Fecha\"\r\n                    maxDate={startDate === null ? new Date() : endDate}\r\n                    onChange={date => setStartDate(date)}\r\n                />\r\n            </div>\r\n            <div className=\"calendar-2\">\r\n                <label>Fecha Final:</label>\r\n                <DatePicker\r\n                    dateFormat=\"dd/MM/yyyy\"\r\n                    locale={es}\r\n                    placeholderText=\"Selecciona una Fecha\"\r\n                    selected={endDate}\r\n                    onChange={date => setEndDate(date)}\r\n                    startDate={startDate}\r\n                    maxDate={new Date()}\r\n                    minDate={startDate}\r\n                />\r\n            </div>\r\n            <div className=\"results\">\r\n            <p>Promedio: $ {Math.round(resultados.promedio)}</p>\r\n            <p>Mínimo: $ {resultados.minimo}</p>\r\n            <p>Máximo: $ {resultados.maximo}</p>\r\n            </div>\r\n         \r\n            <div className=\"grafico\">\r\n            <Grafico data={ejeXY} minimo={resultados.minimo} maximo={resultados.maximo}/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Fecha;","import React from 'react';\nimport Fecha from './Components/Fecha'\nimport FechaProvider from './Context/index'\nimport './App.scss'\n\nconst App = (props) => {\n  return (\n    <FechaProvider>\n      <div className=\"container\">\n        <h1>Valor del Dólar</h1>\n        <Fecha />\n      </div>\n\n    </FechaProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}